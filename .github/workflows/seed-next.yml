name: seed-next
on:
  issues:
    types: [opened, edited]
permissions:
  contents: write
  pull-requests: write

jobs:
  seed-or-gen:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Handle Issue Command (SEED or GEN)
        env:
          GITHUB_EVENT: ${{ toJson(github.event) }}
        run: |
          python3 - <<'PY'
          import os, json, re, pathlib, textwrap, time
          ev=json.loads(os.environ['GITHUB_EVENT'])
          title=(ev.get('issue',{}).get('title') or '').strip()
          body =(ev.get('issue',{}).get('body')  or '')
          cmd=(title+"\n"+body).lower()
          root=pathlib.Path('.')
          changed=False

          def write(p, txt):
              p.parent.mkdir(parents=True, exist_ok=True)
              p.write_text(textwrap.dedent(txt).lstrip('\n'), encoding='utf-8')

          # ---------- SEED: next (creates minimal Next.js app if missing) ----------
          if cmd.startswith('seed: next'):
              if not (root/'package.json').exists():
                  write(root/'package.json', '''
                  {
                    "name": "weave-dashboard",
                    "private": true,
                    "version": "0.1.0",
                    "scripts": {
                      "dev": "next dev",
                      "build": "next build",
                      "start": "next start",
                      "lint": "next lint"
                    },
                    "dependencies": {
                      "next": "^14.2.5",
                      "react": "^18.2.0",
                      "react-dom": "^18.2.0"
                    }
                  }
                  ''')
                  write(root/'next.config.mjs', '''
                  /** @type {import('next').NextConfig} */
                  const nextConfig = { experimental: { appDir: true } };
                  export default nextConfig;
                  ''')
                  write(root/'tsconfig.json', '''
                  {
                    "compilerOptions": {
                      "target": "ES2020",
                      "lib": ["dom", "dom.iterable", "esnext"],
                      "allowJs": true,
                      "skipLibCheck": true,
                      "strict": false,
                      "noEmit": true,
                      "module": "esnext",
                      "moduleResolution": "bundler",
                      "resolveJsonModule": true,
                      "isolatedModules": true,
                      "jsx": "preserve",
                      "plugins": [{ "name": "next" }]
                    },
                    "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "**/*.mjs", "**/*.cjs"],
                    "exclude": ["node_modules"]
                  }
                  ''')
                  write(root/'next-env.d.ts', '/// <reference types="next" />\\n/// <reference types="next/image-types/global" />\\n')
                  write(root/'.gitignore', 'node_modules\\n.next\\nout\\n')
                  write(root/'app'/'layout.tsx', '''
                  export default function RootLayout({ children }: { children: React.ReactNode }) {
                    return (<html lang="en"><body style={{fontFamily:"system-ui, Arial",padding:24}}>{children}</body></html>);
                  }
                  ''')
                  write(root/'app'/'page.tsx', '''
                  export default function Page() {
                    return (<main><h1>Dashboard</h1><p>Seeded by CI.</p></main>);
                  }
                  ''')
                  changed=True

          # ---------- GEN: page /path (adds a new route under app/) ----------
          m=re.search(r'gen:\\s*page\\s*([/\\w\\-]+)', cmd)
          if m:
              slug=m.group(1).strip('/').replace('//','/')
              write(root/'app'/slug/'page.tsx', f'''
              export default function Page() {{
                return (<main style={{padding:24}}><h1>/{slug}</h1><p>Auto-generated.</p></main>);
              }}
              ''')
              changed=True

          (root/'_CHANGED.flag').write_text('1' if changed else '0', encoding='utf-8')
          PY

      - name: Commit changes (if any)
        run: |
          if [ -f _CHANGED.flag ] && [ "$(cat _CHANGED.flag)" = "1" ]; then
            git config user.name "seed-bot"
            git config user.email "seed-bot@users.noreply.github.com"
            git add -A
            # Branch per issue to play nice with Vercel PR comments
            BR="agent/issue-${{ github.event.issue.number }}"
            git commit -m "agent: apply issue #${{ github.event.issue.number }}"
            git switch -c "$BR"
            git push -u origin "$BR"
          fi

      - name: Open Pull Request
        if: ${{ hashFiles('_CHANGED.flag') != '' }}
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "agent: apply issue #${{ github.event.issue.number }}"
          branch: "agent/issue-${{ github.event.issue.number }}"
          title: "Agent change from issue #${{ github.event.issue.number }}"
          body: "Auto-generated change based on issue #${{ github.event.issue.number }}."
