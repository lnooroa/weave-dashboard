name: dashboard-upgrade
on:
  issues:
    types: [opened, edited]
permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Upgrade dashboard to v1 (buttons + API)
        shell: bash
        env:
          TITLE: ${{ github.event.issue.title }}
          BODY: ${{ github.event.issue.body }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          title="$TITLE"
          body="${BODY:-}"
          cmd="$(printf '%s\n%s' "$title" "$body" | tr '[:upper:]' '[:lower:]')"
          echo "TITLE: $title"
          echo "CMD  : ${cmd:0:160}..."

          # Only act on: UPGRADE: dashboard v1
          if [[ ! "$cmd" =~ ^upgrade:\ *dashboard\ *v1 ]]; then
            echo "No upgrade command; exit."
            exit 0
          fi

          # pick Next base dir (prefer app router)
          if [ -d app ]; then base=app
          elif [ -d src/app ]; then base=src/app
          elif [ -d src/pages ]; then base=src/pages
          elif [ -d pages ]; then base=pages
          else base=app; fi
          mkdir -p "$base"
          echo "BASE: $base"

          # ---------- Write /dashboard (client UI) ----------
          dashdir="$base/dashboard"
          mkdir -p "$dashdir"
          cat > "$dashdir/page.tsx" <<'TSX'
          'use client';
          import { useState } from 'react';

          async function postJSON(url: string, data: any) {
            const res = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });
            try { return await res.json(); } catch { return { ok:false, status: res.status }; }
          }

          export default function Dashboard() {
            const [slug, setSlug] = useState('');
            const [title, setTitle] = useState('GEN: page /hello3');
            const [status, setStatus] = useState<string>('');
            const repo = "__REPO__";

            async function createIssue() {
              setStatus('Submitting…');
              const r = await postJSON('/api/issue', { title, body: '' });
              setStatus(r?.ok ? `Opened issue #${r.number}` : `Issue failed: ${r?.status || r?.error || 'error'}`);
            }

            function issueLink(t: string) {
              const pre = `https://github.com/${repo}/issues/new?title=`;
              return pre + encodeURIComponent(t);
            }

            return (
              <main style={{ padding: 24, fontFamily: "system-ui, Arial" }}>
                <h1>Weave Dashboard</h1>

                <section style={{ marginTop: 16 }}>
                  <h3>Generate Page (no typing)</h3>
                  <p>Tap a link to open a prefilled GitHub Issue (fallback mode):</p>
                  <ul>
                    <li><a target="_blank" href={issueLink("GEN: page /hello2")}>Create /hello2</a></li>
                    <li><a target="_blank" href={issueLink("GEN: page /about")}>Create /about</a></li>
                    <li><a target="_blank" href={issueLink("DEL: page /about")}>Delete /about</a></li>
                    <li><a target="_blank" href={issueLink("UPGRADE: dashboard v1")}>Re-run upgrade</a></li>
                  </ul>
                </section>

                <section style={{ marginTop: 24 }}>
                  <h3>Native buttons (no GitHub screen)</h3>
                  <p style={{ fontSize: 14, opacity: 0.8 }}>
                    Works when a <code>GH_TOKEN</code> is set in Vercel. Otherwise the buttons will tell you to add it.
                  </p>

                  <div style={{ display: "flex", gap: 8, alignItems: "center", marginTop: 8 }}>
                    <input
                      placeholder="slug (e.g. blog)"
                      value={slug}
                      onChange={e => setSlug(e.target.value)}
                      style={{ padding: 8, border: "1px solid #ccc", borderRadius: 8 }}
                    />
                    <button
                      onClick={async () => {
                        const s = (slug || '').replace(/[^a-z0-9/_-]/gi,'').replace(/^\/+/,'');
                        if (!s) { setStatus('Enter a slug'); return; }
                        setStatus('Submitting…');
                        const r = await postJSON('/api/issue', { title:`GEN: page /${s}`, body:'' });
                        setStatus(r?.ok ? `Opened issue #${r.number}` : `Issue failed: ${r?.status || r?.error || 'error'}`);
                      }}
                      style={{ padding: "8px 12px", borderRadius: 8, border: "1px solid #888" }}
                    >
                      Generate /{slug || '…'}
                    </button>
                  </div>

                  <div style={{ display: "flex", gap: 8, alignItems: "center", marginTop: 12 }}>
                    <input
                      placeholder='Issue title (e.g. "GEN: page /contact")'
                      value={title}
                      onChange={e => setTitle(e.target.value)}
                      style={{ flex: 1, padding: 8, border: "1px solid #ccc", borderRadius: 8 }}
                    />
                    <button onClick={createIssue} style={{ padding: "8px 12px", borderRadius: 8, border: "1px solid #888" }}>
                      Send
                    </button>
                  </div>

                  <p style={{ marginTop: 8, fontFamily: "ui-monospace, SFMono-Regular, Menlo, monospace", fontSize: 13 }}>{status}</p>
                </section>

                <section style={{ marginTop: 24 }}>
                  <h3>Health</h3>
                  <ul style={{ fontSize: 14 }}>
                    <li>API: <a href="/api/health" target="_blank">/api/health</a></li>
                    <li>Repo: {repo}</li>
                  </ul>
                </section>
              </main>
            );
          }
          TSX
          sed -i "s|__REPO__|$REPO|g" "$dashdir/page.tsx"

          # ---------- Write /api/issue (creates GitHub Issue) ----------
          apidir="$base/api/issue"
          mkdir -p "$apidir"
          cat > "$apidir/route.ts" <<'TS'
          import { NextResponse } from "next/server";
          const REPO = "__REPO__";
          export async function POST(req: Request) {
            try {
              const token = process.env.GH_TOKEN;
              const { title, body } = await req.json();
              if (!token) return NextResponse.json({ ok:false, error:"Missing GH_TOKEN" }, { status: 400 });
              if (!title) return NextResponse.json({ ok:false, error:"Missing title" }, { status: 400 });

              const r = await fetch(`https://api.github.com/repos/${REPO}/issues`, {
                method: "POST",
                headers: {
                  "Authorization": `token ${token}`,
                  "Accept": "application/vnd.github+json",
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({ title, body: body || "" })
              });
              const json = await r.json();
              if (!r.ok) return NextResponse.json({ ok:false, status:r.status, error: json?.message || "GitHub error" }, { status: 500 });
              return NextResponse.json({ ok:true, number: json.number, url: json.html_url });
            } catch (e:any) {
              return NextResponse.json({ ok:false, error: e?.message || "error" }, { status: 500 });
            }
          }
          TS
          sed -i "s|__REPO__|$REPO|g" "$apidir/route.ts"

          # ---------- Write /api/health (reports token presence) ----------
          healthdir="$base/api/health"
          mkdir -p "$healthdir"
          cat > "$healthdir/route.ts" <<'TS'
          import { NextResponse } from "next/server";
          export async function GET() {
            return NextResponse.json({ ok:true, hasToken: !!process.env.GH_TOKEN, time: new Date().toISOString() });
          }
          TS

          git config user.name "dash-upgrader"
          git config user.email "dash-upgrader@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "dashboard: upgrade to v1 (buttons + /api)"
          git push
